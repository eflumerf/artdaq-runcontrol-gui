cmake_minimum_required(VERSION 3.1.0)

project(artdaq-runcontrol)

add_definitions(-DVERSION="${artdaq-runcontrol-gui_VERSION}")
add_definitions(-DNAME="artdaq-runcontrol-gui")
add_definitions(-DSYSTEM="${artdaq-runcontrol-gui_EXEC_PREFIX}")

add_definitions(-DGIT_HASH="warawara")
add_definitions(-DGIT_BRANCH="master")
cet_add_compiler_flags( -Wno-deprecated-declarations )
# # Not working attempt:
# add_definitions(-DVERSION="${CPACK_PACKAGE_VERSION}")
# add_definitions(-DNAME="${CPACK_PACKAGE_NAME}")
# add_definitions(-DSYSTEM="${CPACK_SYSTEM_NAME}")

# # Some other non working attempts
# add_definitions(-DGIT_CURRENT_SHA1="$(shell git -C \""$$_PRO_FILE_PWD_"\" describe)")
# add_definitions(-DGIT_CURRENT_SHA1="asdasdasdasf")
# add_definitions(-DGIT_HASH=`git rev-parse HEAD`)
# add_definitions(-DCOMPILE_TIME=`date -u +'%Y-%m-%d %H:%M:%S UTC'`)
# add_definitions(-DGIT_BRANCH="$(shell git rev-parse --abbrev-ref HEAD)")
# add_definitions(-DGIT_VERSION = $$system(git --git-dir $$PWD/.git --work-tree $$PWD describe --always --tags))

# Find includes in corresponding build directories
set(CMAKE_INCLUDE_CURRENT_DIR ON)
# Instruct CMake to run moc automatically when needed
set(CMAKE_AUTOMOC ON)
# Create code from a list of Qt designer ui files
set(CMAKE_AUTOUIC ON)

find_package(XMLRPC REQUIRED c++2 client)

#set(CMAKE_BUILD_TYPE Debug) # un-comment to build debug product

string(TOUPPER ${CMAKE_BUILD_TYPE} BTYPE_UC)
if(BTYPE_UC STREQUAL DEBUG)
else()
add_definitions(-DQT_NO_DEBUG_OUTPUT) # comment to have debug messages printed
endif()

# get context info about files, functions and lines where output is being printed 
add_definitions(-DQT_MESSAGELOGCONTEXT)

add_subdirectory(resources)

# Find the QtWidgets library
find_package(Qt5Widgets CONFIG REQUIRED)

# Populate a CMake variable with the sources
set(artdaq-runcontrol_srcs
    mainwindow.ui
    mainwindow.cpp
    daqinterfacestate.cpp
    daqinterfacestate.ui
    xmlrpc_gui_comm.cpp
    db_dialog.cpp
    db_dialog.ui
    menuoptionsdialog.cpp
    menuoptionsdialog.ui
    messagehandler.cpp
    main.cpp
)

# Tell CMake to create the helloworld executable
cet_make_exec(NAME artdaqRunControl SOURCE ${artdaq-runcontrol_srcs} LIBRARIES Qt5::Widgets ${XMLRPC_LIBRARIES})
target_include_directories(artdaqRunControl PRIVATE ${XMLRPC_INCLUDE_DIRS})

